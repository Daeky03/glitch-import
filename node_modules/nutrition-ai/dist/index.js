"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  generateAnswer: () => generateAnswer
});
module.exports = __toCommonJS(src_exports);

// src/generate.ts
var import_generative_ai = require("@google/generative-ai");
var import_zod = require("zod");

// src/template.ts
var prompt = `Bu Fotoğrafı açıkla`;

// src/generate.ts
async function generateAnswer(input) {
  const validated = validateInputSchema.safeParse(input);
  if (!validated.success) {
    throw new Error(
      `Invalid parameters: ${JSON.stringify(
        validated.error.flatten().fieldErrors
      )}`
    );
  }
  const {
    fileBase64,
    fileMimeType,
    googleKey,
    model = "gemini-pro-vision"
  } = validated.data;
  const imagePart = {
    inlineData: {
      data: fileBase64,
      mimeType: fileMimeType
    }
  };
  try {
    const genAI = new import_generative_ai.GoogleGenerativeAI(googleKey);
    const genModel = genAI.getGenerativeModel({ model });
    const result = await genModel.generateContent([prompt, imagePart]);
    const response = await result.response;
    return response.text();
  } catch (error) {
    throw error;
  }
}
var validateInputSchema = import_zod.z.object({
  googleKey: import_zod.z.string({
    required_error: "googleKey is required."
  }).min(1, {
    message: "Invalid googleKey."
  }),
  model: import_zod.z.string().optional(),
  fileBase64: import_zod.z.string({
    required_error: "fileBase64 is required."
  }).min(1, {
    message: "Invalid fileBase64."
  }),
  fileMimeType: import_zod.z.enum(["image/jpeg", "image/png"], {
    required_error: "fileMimeType is required."
  })
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  generateAnswer
});
